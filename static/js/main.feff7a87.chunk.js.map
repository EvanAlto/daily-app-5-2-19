{"version":3,"sources":["NavItem.js","App.js","serviceWorker.js","index.js"],"names":["NavItem","_ref","children","color","text","active","handleClick","react_default","a","createElement","onClick","className","concat","home","likes","search","user","App","state","backgroundColor","_this","setState","_this$state","this","style","src_NavItem","index_esm","stroke","Component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAWeA,EATC,SAAAC,GAAmD,IAAhDC,EAAgDD,EAAhDC,SAAUC,EAAsCF,EAAtCE,MAAOC,EAA+BH,EAA/BG,KAAMC,EAAyBJ,EAAzBI,OAAQC,EAAiBL,EAAjBK,YAChD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,QAAS,kBAAMJ,EAAYF,EAAMD,IACpCQ,UAAS,GAAAC,OAAKR,EAAL,KAAAQ,OAAaP,IAAWD,GAAQ,SAAhC,cACRF,ICDDW,EACG,UADHA,EAEE,OAGFC,EACG,UADHA,EAEE,QAGFC,EACG,UADHA,EAEE,SAGFC,EACG,UADHA,EAEE,OA2COC,6MAtCbC,MAAQ,CACNC,gBAAiB,UACjBd,OAAQ,UAGVC,YAAc,SAACD,EAAQc,GACjBC,EAAKF,MAAMb,SAAWA,GACxBe,EAAKC,SAAS,CACZF,kBACAd,oFAKG,IAAAiB,EAC6BC,KAAKL,MAAjCb,EADDiB,EACCjB,OAAQc,EADTG,EACSH,gBAEhB,OACEZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cAAca,MAAO,CAACL,oBACnCZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAACgB,EAAD,CAAStB,MAAOU,EAAYT,KAAMS,EAAWR,OAAQA,EAAQC,YAAaiB,KAAKjB,aAC7EC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQF,MAAOnB,IAAWQ,GAAa,CAAEc,OAAQd,MAEnDN,EAAAC,EAAAC,cAACgB,EAAD,CAAStB,MAAOW,EAAaV,KAAMU,EAAYT,OAAQA,EAAQC,YAAaiB,KAAKjB,aAC/EC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAASF,MAAOnB,IAAWS,GAAc,CAAEa,OAAQb,MAErDP,EAAAC,EAAAC,cAACgB,EAAD,CAAStB,MAAOY,EAAcX,KAAMW,EAAaV,OAAQA,EAAQC,YAAaiB,KAAKjB,aACjFC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAUF,MAAOnB,IAAWU,GAAe,CAAEY,OAAQZ,MAEvDR,EAAAC,EAAAC,cAACgB,EAAD,CAAStB,MAAOa,EAAYZ,KAAMY,EAAWX,OAAQA,EAAQC,YAAaiB,KAAKjB,aAC7EC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQF,MAAOnB,IAAWW,GAAa,CAAEW,OAAQX,eAhC3CY,aCbEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OACP5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACE7B,EAAAC,EAAAC,cAAC4B,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.feff7a87.chunk.js","sourcesContent":["import React from 'react'\n\nconst NavItem = ({ children, color, text, active, handleClick}) => {\n  return (\n    <div onClick={() => handleClick(text, color)}\n      className={`${text} ${active === text && 'active'}  flex-cc`}>\n      {children}\n    </div>\n  )\n}\n\nexport default NavItem","import React, { Component } from 'react'\nimport './App.css'\nimport { FiHome, FiHeart, FiSearch, FiUser } from 'react-icons/fi'\nimport NavItem from './NavItem'\n\nconst home = {\n  color: '#5b37b7',\n  text: 'home'\n}\n\nconst likes = {\n  color: '#c9379d',\n  text: 'likes'\n}\n\nconst search = {\n  color: '#e6a919',\n  text: 'search'\n}\n\nconst user = {\n  color: '#1094aa',\n  text: 'user'\n}\n\nclass App extends Component {\n\n  state = {\n    backgroundColor: '#5b37b7',\n    active: 'home'\n  }\n\n  handleClick = (active, backgroundColor) => {\n    if (this.state.active !== active) {\n      this.setState({\n        backgroundColor,\n        active\n      })\n    }\n  }\n  \n  render() {\n    const { active, backgroundColor } = this.state\n\n    return (\n      <div className=\"App flex-cc\" style={{backgroundColor}}>\n        <div className=\"navigation\">\n          <NavItem color={home.color} text={home.text} active={active} handleClick={this.handleClick}>\n            <FiHome style={active === home.text && { stroke: home.color }} />\n          </NavItem>\n          <NavItem color={likes.color} text={likes.text} active={active} handleClick={this.handleClick}>\n            <FiHeart style={active === likes.text && { stroke: likes.color }} />\n          </NavItem>\n          <NavItem color={search.color} text={search.text} active={active} handleClick={this.handleClick}>\n            <FiSearch style={active === search.text && { stroke: search.color }} />\n          </NavItem>\n          <NavItem color={user.color} text={user.text} active={active} handleClick={this.handleClick}>\n            <FiUser style={active === user.text && { stroke: user.color }} />\n          </NavItem>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}